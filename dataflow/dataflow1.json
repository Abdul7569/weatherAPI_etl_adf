{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "weather_json_data",
						"type": "DatasetReference"
					},
					"name": "APIjson"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "apidataTable",
						"type": "DatasetReference"
					},
					"name": "SQLdb"
				}
			],
			"transformations": [
				{
					"name": "flatten"
				},
				{
					"name": "selectFieldsneeded"
				},
				{
					"name": "Filtervaliddata"
				},
				{
					"name": "KelvntoF"
				}
			],
			"scriptLines": [
				"source(output(",
				"          current as (clouds as short, dew_point as double, dt as integer, feels_like as double, humidity as short, pressure as short, sunrise as integer, sunset as integer, temp as double, uvi as double, visibility as short, weather as (description as string, icon as double, id as short, main as string)[], wind_deg as short, wind_speed as double),",
				"          daily as (clouds as short, dew_point as double, dt as integer, feels_like as (day as double, eve as double, morn as double, night as double), humidity as short, moon_phase as double, moonrise as integer, moonset as integer, pop as double, pressure as short, rain as double, summary as string, sunrise as integer, sunset as integer, temp as (day as double, eve as double, max as double, min as double, morn as double, night as double), uvi as double, weather as (description as string, icon as double, id as short, main as string)[], wind_deg as short, wind_gust as double, wind_speed as double)[],",
				"          lat as double,",
				"          lon as double,",
				"          timezone as string,",
				"          timezone_offset as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> APIjson",
				"APIjson foldDown(unrollMultiple(daily,daily.weather),",
				"     mapColumn(",
				"          daily,",
				"          lat,",
				"          lon,",
				"          timezone,",
				"          timezone_offset,",
				"          weather = daily.weather",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> flatten",
				"flatten select(mapColumn(",
				"          day_feels_like = daily.feels_like.day,",
				"          lat,",
				"          lon,",
				"          timezone,",
				"          timezone_offset,",
				"          eve_feels_like = daily.feels_like.eve,",
				"          morn_feels_like = daily.feels_like.morn,",
				"          night_feels_like = daily.feels_like.night,",
				"          day_temp = daily.temp.day,",
				"          eve_temp = daily.temp.eve,",
				"          max_temp = daily.temp.max,",
				"          min_temp = daily.temp.min,",
				"          morn_temp = daily.temp.morn,",
				"          night_temp = daily.temp.night,",
				"          weather = daily.weather,",
				"          clouds = daily.clouds,",
				"          dew_point = daily.dew_point,",
				"          dt = daily.dt,",
				"          humidity = daily.humidity,",
				"          moon_phase = daily.moon_phase,",
				"          moonset = daily.moonset,",
				"          moonrise = daily.moonrise,",
				"          pop = daily.pop,",
				"          pressure = daily.pressure,",
				"          rain = daily.rain,",
				"          summary = daily.summary,",
				"          sunrise = daily.sunrise,",
				"          sunset = daily.sunset,",
				"          uvi = daily.uvi,",
				"          wind_deg = daily.wind_deg,",
				"          wind_speed = daily.wind_speed,",
				"          wind_speed = daily.wind_gust,",
				"          description = daily.weather[1].description,",
				"          icon = daily.weather[1].icon,",
				"          main = daily.weather[1].main",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFieldsneeded",
				"KelvntoF filter(!isNull(day_temp) && day_temp >= -50 && day_temp <= 140 &&",
				"!isNull(humidity) && humidity >= 0 && humidity <= 100 &&",
				"!isNull(uvi) && uvi >= 0 && uvi <= 15 &&",
				"(isNull(rain) || rain >= 0)) ~> Filtervaliddata",
				"selectFieldsneeded derive(day_feels_like = round(((day_feels_like - 273.15) * 9 / 5) + 32,2),",
				"          eve_feels_like = round(((eve_feels_like - 273.15) * 9 / 5) + 32,2),",
				"          morn_feels_like = round(((morn_feels_like - 273.15) * 9 / 5) + 32,2),",
				"          night_feels_like = round(((night_feels_like - 273.15) * 9 / 5) + 32,2),",
				"          day_temp = round(((day_temp - 273.15) * 9 / 5) + 32,2),",
				"          eve_temp = round(((eve_temp - 273.15) * 9 / 5) + 32,2),",
				"          max_temp = round(((max_temp - 273.15) * 9 / 5) + 32,2),",
				"          min_temp = round(((min_temp - 273.15) * 9 / 5) + 32,2),",
				"          morn_temp = round(((morn_temp - 273.15) * 9 / 5) + 32,2),",
				"          night_temp = round(((night_temp - 273.15) * 9 / 5) + 32,2),",
				"          dew_point = round(((dew_point - 273.15) * 9 / 5) + 32,2),",
				"          dt = toTimestamp(dt * 1000),",
				"          moonset = toTimestamp(moonset * 1000),",
				"          moonrise = toTimestamp(moonrise * 1000),",
				"          sunrise = toTimestamp(sunrise * 1000),",
				"          sunset = toTimestamp(sunset * 1000),",
				"          uvi_level = iif(uvi <= 2, 'Low',     iif(uvi <= 5, 'Moderate',         iif(uvi <= 7, 'High',             iif(uvi <= 10, 'Very High', 'Extreme')))),",
				"          moon_phase_name = iif(moon_phase == 0 || moon_phase == 1, 'New Moon',   iif(moon_phase < 0.25, 'Waxing Crescent',     iif(moon_phase == 0.25, 'First Quarter',       iif(moon_phase < 0.5, 'Waxing Gibbous',         iif(moon_phase == 0.5, 'Full Moon',           iif(moon_phase < 0.75, 'Waning Gibbous',             iif(moon_phase == 0.75, 'Last Quarter', 'Waning Crescent')))))))) ~> KelvntoF",
				"Filtervaliddata sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> SQLdb"
			]
		}
	}
}